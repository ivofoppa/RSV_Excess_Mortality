dxvb <- - beta1*xvb*(yva1 + yvb1 + ynv1) - beta2*xvb*(yvb2 + ynv2)
dxnv <- - beta1*xnv*(yva1 + yvb1 + ynv1) - beta2*xnv*(yvb2 + ynv2)
dyva1 <- beta1*xva*(yva1 + yvb1 + ynv1) - yva1*gamma
dyvb1 <- beta1*xvb*(yva1 + yvb1 + ynv1) - yvb1*gamma
dyvb2 <- beta2*xvb*(yvb2 + ynv2) - yvb2*gamma
dynv1 <- beta1*xnv*(yva1 + yvb1 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yvb2 + ynv2) - ynv2*gamma
dyva1new <- beta1*xva*(yva1 + yvb1 + ynv1)
dyvb1new <- beta1*xvb*(yva1 + yvb1 + ynv1)
dyvb2new <- beta2*xvb*(yvb2 + ynv2)
dynv1new <- beta1*xnv*(yva1 + yvb1 + ynv1)
dynv2new <- beta2*xnv*(yvb2 + ynv2)
dz <- (ynv1 + ynv2 + yva1 + yvb1 + yvb2)*gamma
# return the rate of change
list(c(dxva,dxvb,dxnv,dynv1,dynv2,dyva1,dyvb1,dyvb2,
dynv1new,dynv2new,dyva1new,dyvb1new,dyvb2new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xva=xva0,xvb=xvb0,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yva1=yva10,yvb1=yvb10,yvb2=yvb20,
ynv1new=0,ynv2new=0,yva1new=0,yvb1new=0,yvb2new=0,z=z0)
times <- seq(0, 200, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xva <- out$xva
xvb <- out$xvb
xnv <- out$xnv
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
yva1new <- out$yva1new
yvb1new <- out$yvb1new
yvb2new <- out$yvb2new
# plot(ynv1new + yva1new + yvb1new,type = 'l')
# lines(ynv2new + yvb2new,col = 'green')
dxva <- -diff(xva)
dxvb <- -diff(xvb)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv1 <- diff(yva1new + yvb1new)
dyv2 <- diff(yvb2new)
plot(ynv1new,col = 'green',type = 'l')
lines(yva1new + yvb1new,col = 'red')
###################################################################################################
plot(dynv1,col = 'green',type = 'l')
lines(dyv1,col = 'red')
plot(dynv2,col = 'green',type = 'l')
lines(dyv2,col = 'red')
###################################################################################################
## any flu
r1 <- (sum(dxva[which(0 <= times & times < max(times)/3)]) + sum(dxvb[which(0 <= times & times < max(times)/3)]))/
sum(dxnv[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dxva[which(max(times)/3 <= times & times < 2*max(times)/3)]) + sum(dxvb[which(max(times)/3 <= times & times < 2*max(times)/3)]))/
sum(dxnv[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dxva[which(2*max(times)/3 <= times & times < max(times))]) + sum(dxvb[which(2*max(times)/3 <= times & times < max(times))]))/
sum(dxnv[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
#plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1),type = 'b')
###################################################################################################
###################################################################################################
## strain 1
r1 <- (sum(dyv1[which(0 <= times & times < max(times)/3)]))/sum(dynv1[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv1[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv1[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv1[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv1[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
## strain 2
r1 <- (sum(dyv2[which(0 <= times & times < max(times)/3)]))/sum(dynv2[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv2[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv2[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv2[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv2[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
VEls
beta2 <- 1.8*gamma/(Ntot)
### Initial conditions
yva10 <- yva1 <- 0;
yvb10 <- yvb1 <- 0;
yvb20 <- yvb2 <- 0;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xva0 <- Nva0 - yva10
xvb0 <- Nvb0 - yvb10 - yvb20
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
### define parameter vector for ode function
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxva <- - beta1*xva*(yva1 + yvb1 + ynv1)
dxvb <- - beta1*xvb*(yva1 + yvb1 + ynv1) - beta2*xvb*(yvb2 + ynv2)
dxnv <- - beta1*xnv*(yva1 + yvb1 + ynv1) - beta2*xnv*(yvb2 + ynv2)
dyva1 <- beta1*xva*(yva1 + yvb1 + ynv1) - yva1*gamma
dyvb1 <- beta1*xvb*(yva1 + yvb1 + ynv1) - yvb1*gamma
dyvb2 <- beta2*xvb*(yvb2 + ynv2) - yvb2*gamma
dynv1 <- beta1*xnv*(yva1 + yvb1 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yvb2 + ynv2) - ynv2*gamma
dyva1new <- beta1*xva*(yva1 + yvb1 + ynv1)
dyvb1new <- beta1*xvb*(yva1 + yvb1 + ynv1)
dyvb2new <- beta2*xvb*(yvb2 + ynv2)
dynv1new <- beta1*xnv*(yva1 + yvb1 + ynv1)
dynv2new <- beta2*xnv*(yvb2 + ynv2)
dz <- (ynv1 + ynv2 + yva1 + yvb1 + yvb2)*gamma
# return the rate of change
list(c(dxva,dxvb,dxnv,dynv1,dynv2,dyva1,dyvb1,dyvb2,
dynv1new,dynv2new,dyva1new,dyvb1new,dyvb2new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xva=xva0,xvb=xvb0,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yva1=yva10,yvb1=yvb10,yvb2=yvb20,
ynv1new=0,ynv2new=0,yva1new=0,yvb1new=0,yvb2new=0,z=z0)
times <- seq(0, 200, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xva <- out$xva
xvb <- out$xvb
xnv <- out$xnv
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
yva1new <- out$yva1new
yvb1new <- out$yvb1new
yvb2new <- out$yvb2new
# plot(ynv1new + yva1new + yvb1new,type = 'l')
# lines(ynv2new + yvb2new,col = 'green')
dxva <- -diff(xva)
dxvb <- -diff(xvb)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv1 <- diff(yva1new + yvb1new)
dyv2 <- diff(yvb2new)
plot(ynv1new,col = 'green',type = 'l')
lines(yva1new + yvb1new,col = 'red')
###################################################################################################
plot(dynv1,col = 'green',type = 'l')
lines(dyv1,col = 'red')
plot(dynv2,col = 'green',type = 'l')
lines(dyv2,col = 'red')
###################################################################################################
## any flu
r1 <- (sum(dxva[which(0 <= times & times < max(times)/3)]) + sum(dxvb[which(0 <= times & times < max(times)/3)]))/
sum(dxnv[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dxva[which(max(times)/3 <= times & times < 2*max(times)/3)]) + sum(dxvb[which(max(times)/3 <= times & times < 2*max(times)/3)]))/
sum(dxnv[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dxva[which(2*max(times)/3 <= times & times < max(times))]) + sum(dxvb[which(2*max(times)/3 <= times & times < max(times))]))/
sum(dxnv[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
#plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1),type = 'b')
###################################################################################################
###################################################################################################
## strain 1
r1 <- (sum(dyv1[which(0 <= times & times < max(times)/3)]))/sum(dynv1[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv1[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv1[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv1[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv1[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
## strain 2
r1 <- (sum(dyv2[which(0 <= times & times < max(times)/3)]))/sum(dynv2[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv2[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv2[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv2[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv2[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
VEls
vacc <- 0.4
phi <- 0.5
Nv0 <- round(Ntot*vacc)
Nva0 <- round(Nv0*phi)
Nvb0 <- Nv0 - Nva0
Nnv0 <- Ntot - Nv0
gamma <- 0.333
beta1 <- 1.3*gamma/(Ntot)
beta2 <- 1.8*gamma/(Ntot)
### Initial conditions
yva10 <- yva1 <- 0;
yvb10 <- yvb1 <- 0;
yvb20 <- yvb2 <- 0;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xva0 <- Nva0 - yva10
xvb0 <- Nvb0 - yvb10 - yvb20
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
### define parameter vector for ode function
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxva <- - beta1*xva*(yva1 + yvb1 + ynv1)
dxvb <- - beta1*xvb*(yva1 + yvb1 + ynv1) - beta2*xvb*(yvb2 + ynv2)
dxnv <- - beta1*xnv*(yva1 + yvb1 + ynv1) - beta2*xnv*(yvb2 + ynv2)
dyva1 <- beta1*xva*(yva1 + yvb1 + ynv1) - yva1*gamma
dyvb1 <- beta1*xvb*(yva1 + yvb1 + ynv1) - yvb1*gamma
dyvb2 <- beta2*xvb*(yvb2 + ynv2) - yvb2*gamma
dynv1 <- beta1*xnv*(yva1 + yvb1 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yvb2 + ynv2) - ynv2*gamma
dyva1new <- beta1*xva*(yva1 + yvb1 + ynv1)
dyvb1new <- beta1*xvb*(yva1 + yvb1 + ynv1)
dyvb2new <- beta2*xvb*(yvb2 + ynv2)
dynv1new <- beta1*xnv*(yva1 + yvb1 + ynv1)
dynv2new <- beta2*xnv*(yvb2 + ynv2)
dz <- (ynv1 + ynv2 + yva1 + yvb1 + yvb2)*gamma
# return the rate of change
list(c(dxva,dxvb,dxnv,dynv1,dynv2,dyva1,dyvb1,dyvb2,
dynv1new,dynv2new,dyva1new,dyvb1new,dyvb2new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xva=xva0,xvb=xvb0,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yva1=yva10,yvb1=yvb10,yvb2=yvb20,
ynv1new=0,ynv2new=0,yva1new=0,yvb1new=0,yvb2new=0,z=z0)
times <- seq(0, 200, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xva <- out$xva
xvb <- out$xvb
xnv <- out$xnv
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
yva1new <- out$yva1new
yvb1new <- out$yvb1new
yvb2new <- out$yvb2new
# plot(ynv1new + yva1new + yvb1new,type = 'l')
# lines(ynv2new + yvb2new,col = 'green')
dxva <- -diff(xva)
dxvb <- -diff(xvb)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv1 <- diff(yva1new + yvb1new)
dyv2 <- diff(yvb2new)
plot(ynv1new,col = 'green',type = 'l')
lines(yva1new + yvb1new,col = 'red')
###################################################################################################
plot(dynv1,col = 'green',type = 'l')
lines(dyv1,col = 'red')
plot(dynv2,col = 'green',type = 'l')
lines(dyv2,col = 'red')
###################################################################################################
## any flu
r1 <- (sum(dxva[which(0 <= times & times < max(times)/3)]) + sum(dxvb[which(0 <= times & times < max(times)/3)]))/
sum(dxnv[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dxva[which(max(times)/3 <= times & times < 2*max(times)/3)]) + sum(dxvb[which(max(times)/3 <= times & times < 2*max(times)/3)]))/
sum(dxnv[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dxva[which(2*max(times)/3 <= times & times < max(times))]) + sum(dxvb[which(2*max(times)/3 <= times & times < max(times))]))/
sum(dxnv[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
#plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1),type = 'b')
###################################################################################################
###################################################################################################
## strain 1
r1 <- (sum(dyv1[which(0 <= times & times < max(times)/3)]))/sum(dynv1[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv1[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv1[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv1[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv1[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
## strain 2
r1 <- (sum(dyv2[which(0 <= times & times < max(times)/3)]))/sum(dynv2[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv2[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv2[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv2[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv2[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
### Investigating the presence of waning when all-or none effect with against specific influenza strains
library(deSolve)
## asign values to parameters
Ntot <- 20000000
vacc <- 0.4
phi <- 0.5
Nv0 <- round(Ntot*vacc)
Nva0 <- round(Nv0*phi)
Nvb0 <- Nv0 - Nva0
Nnv0 <- Ntot - Nv0
gamma <- 0.333
beta1 <- 1.3*gamma/(Ntot)
beta2 <- 1.6*gamma/(Ntot)
### Initial conditions
yva10 <- yva1 <- 0;
yvb10 <- yvb1 <- 0;
yvb20 <- yvb2 <- 0;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xva0 <- Nva0 - yva10
xvb0 <- Nvb0 - yvb10 - yvb20
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
### define parameter vector for ode function
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxva <- - beta1*xva*(yva1 + yvb1 + ynv1)
dxvb <- - beta1*xvb*(yva1 + yvb1 + ynv1) - beta2*xvb*(yvb2 + ynv2)
dxnv <- - beta1*xnv*(yva1 + yvb1 + ynv1) - beta2*xnv*(yvb2 + ynv2)
dyva1 <- beta1*xva*(yva1 + yvb1 + ynv1) - yva1*gamma
dyvb1 <- beta1*xvb*(yva1 + yvb1 + ynv1) - yvb1*gamma
dyvb2 <- beta2*xvb*(yvb2 + ynv2) - yvb2*gamma
dynv1 <- beta1*xnv*(yva1 + yvb1 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yvb2 + ynv2) - ynv2*gamma
dyva1new <- beta1*xva*(yva1 + yvb1 + ynv1)
dyvb1new <- beta1*xvb*(yva1 + yvb1 + ynv1)
dyvb2new <- beta2*xvb*(yvb2 + ynv2)
dynv1new <- beta1*xnv*(yva1 + yvb1 + ynv1)
dynv2new <- beta2*xnv*(yvb2 + ynv2)
dz <- (ynv1 + ynv2 + yva1 + yvb1 + yvb2)*gamma
# return the rate of change
list(c(dxva,dxvb,dxnv,dynv1,dynv2,dyva1,dyvb1,dyvb2,
dynv1new,dynv2new,dyva1new,dyvb1new,dyvb2new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xva=xva0,xvb=xvb0,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yva1=yva10,yvb1=yvb10,yvb2=yvb20,
ynv1new=0,ynv2new=0,yva1new=0,yvb1new=0,yvb2new=0,z=z0)
times <- seq(0, 200, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xva <- out$xva
xvb <- out$xvb
xnv <- out$xnv
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
yva1new <- out$yva1new
yvb1new <- out$yvb1new
yvb2new <- out$yvb2new
# plot(ynv1new + yva1new + yvb1new,type = 'l')
# lines(ynv2new + yvb2new,col = 'green')
dxva <- -diff(xva)
dxvb <- -diff(xvb)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv1 <- diff(yva1new + yvb1new)
dyv2 <- diff(yvb2new)
plot(ynv1new,col = 'green',type = 'l')
lines(yva1new + yvb1new,col = 'red')
###################################################################################################
plot(dynv1,col = 'green',type = 'l')
lines(dyv1,col = 'red')
plot(dynv2,col = 'green',type = 'l')
lines(dyv2,col = 'red')
###################################################################################################
## any flu
r1 <- (sum(dxva[which(0 <= times & times < max(times)/3)]) + sum(dxvb[which(0 <= times & times < max(times)/3)]))/
sum(dxnv[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dxva[which(max(times)/3 <= times & times < 2*max(times)/3)]) + sum(dxvb[which(max(times)/3 <= times & times < 2*max(times)/3)]))/
sum(dxnv[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dxva[which(2*max(times)/3 <= times & times < max(times))]) + sum(dxvb[which(2*max(times)/3 <= times & times < max(times))]))/
sum(dxnv[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
###################################################################################################
###################################################################################################
## strain 1
r1 <- (sum(dyv1[which(0 <= times & times < max(times)/3)]))/sum(dynv1[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv1[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv1[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv1[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv1[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
## strain 2
r1 <- (sum(dyv2[which(0 <= times & times < max(times)/3)]))/sum(dynv2[which(0 <= times & times < max(times)/3)])
r2 <- (sum(dyv2[which(max(times)/3 <= times & times < 2*max(times)/3)]))/sum(dynv2[which(max(times)/3 <= times & times < 2*max(times)/3)])
r3 <- (sum(dyv2[which(2*max(times)/3 <= times & times < max(times))]))/sum(dynv2[which(2*max(times)/3 <= times & times < max(times))])
rls <- c(r1,r2,r3)
plot(rls,ylim = c(0,max(rls)*1.2))
VEls <- 1-rls/(vacc/(1-vacc))
plot(VEls,ylim = c(0,1))
VEls
itnum <- 10000
cav <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x)
canv <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x)
cov <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x)
canv <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x)
cav <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x)
cov <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
cav <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
OR <- 0.5*0.5
mean(cav/canv/(cov/conv))
conv <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
mean(cav/canv/(cov/conv))
OR <- 0.5*0.5
OR
itnum <- 10000
cav <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,10), function(x) ifelse(x==0,1,x))
conv <- sapply(rpois(itnum,5), function(x) ifelse(x==0,1,x))
OR <- 0.5*0.5
mean(cav/canv/(cov/conv))
ORestls <- NULL
for (C in 1:100){
cav <- sapply(rpois(itnum,5*C), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,10*C), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,10*C), function(x) ifelse(x==0,1,x))
conv <- sapply(rpois(itnum,5*C), function(x) ifelse(x==0,1,x))
ORestls <- c(ORestls,mean(cav/canv/(cov/conv)))
}
plot(ORestls)
cavr <- 5
canvr <- 10
covr <- 10
convr <- 5
OR <- cavr/canvr/(covr/convr)
OR
plot(ORestls, type = 'l', ylim = c(0,1))
ORestls <- NULL
for (C in seq(1,20,0.5)){
cav <- sapply(rpois(itnum,cavr*C), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,canvr*C), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,covr*C), function(x) ifelse(x==0,1,x))
conv <- sapply(rpois(itnum,convr*C), function(x) ifelse(x==0,1,x))
ORestls <- c(ORestls,mean(cav/canv/(cov/conv)))
}
plot(ORestls, type = 'l', ylim = c(0,1))
fls <- seq(1,20,0.5)
plot(fls,ORestls, type = 'l', ylim = c(0,1))
ORestls2 <- NULL
for (C in fls){
cav <- sapply(rpois(itnum,cavr*C), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,canvr*C), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,covr*10*C), function(x) ifelse(x==0,1,x))
conv <- sapply(rpois(itnum,convr*10*C), function(x) ifelse(x==0,1,x))
ORestls2 <- c(ORestls2,mean(cav/canv/(cov/conv)))
}
plot(fls,ORestls2, type = 'l', ylim = c(0,1))
coC <- 10 ## Control multiplier
caC <- 1 ## Case multiplier
coC <- 10 ## Control multiplier
caC <- 1 ## Case multiplier
coC <- 100 ## Control multiplier
caC <- 1 ## Case multiplier
for (C in fls){
cav <- sapply(rpois(itnum,cavr*caC*C), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,canvr*caC*C), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,covr*coC*C), function(x) ifelse(x==0,1,x))
conv <- sapply(rpois(itnum,convr*coC*C), function(x) ifelse(x==0,1,x))
ORestls2 <- c(ORestls2,mean(cav/canv/(cov/conv)))
}
plot(fls,ORestls2, type = 'l', ylim = c(0,1))
ORestls2 <- NULL
for (C in fls){
cav <- sapply(rpois(itnum,cavr*caC*C), function(x) ifelse(x==0,1,x))
canv <- sapply(rpois(itnum,canvr*caC*C), function(x) ifelse(x==0,1,x))
cov <- sapply(rpois(itnum,covr*coC*C), function(x) ifelse(x==0,1,x))
conv <- sapply(rpois(itnum,convr*coC*C), function(x) ifelse(x==0,1,x))
ORestls2 <- c(ORestls2,mean(cav/canv/(cov/conv)))
}
plot(fls,ORestls2, type = 'l', ylim = c(0,1))
x<-6
x <- c(.22,.19,.12,.09,.05)
y <- c(.4,.36,.38,.1,-.1)
lreg <- lm(y ~ x)
summary(lreg)
y2 <- c(.5,.3,.39,.15,-.0)
lreg <- lm(y2 ~ x)
summary(lreg)
y2 <- c(.4,.5,.39,.15,-.0)
lreg <- lm(y2 ~ x)
summary(lreg)
y2 <- c(.4,.5,.39,-.15,15)
lreg <- lm(y2 ~ x)
summary(lreg)
y2 <- c(.4,.5,.3,-.15,15)
lreg <- lm(y2 ~ x)
summary(lreg)
plot(y2)
y2 <- c(.4,.5,.3,-.15,.15)
lreg <- lm(y2 ~ x)
summary(lreg)
plot(y2)
x2 <- c(.22,.19,.12)
y2 <- c(.3,.3,.5)
lreg <- lm(y2 ~ x2)
summary(lreg)
plot(y2)
plot(y2,ylim = c(0,1) )
y2 <- c(.3,.4,.5)
lreg <- lm(y2 ~ x2)
summary(lreg)
93.55/2
install.packages("knitr")
dir()
bfolder <- "C:/Users/vor1/Dropbox/Misc work/RSV/RSV git project/" ## project folder
setwd(paste0(bfolder,'RSVSweave'))
Sweave2knitr('EM_Table_RSV_Flu.Rnw')
library(knitr)
Sweave2knitr('EM_Table_RSV_Flu.Rnw')
install.packages('knitr', dependencies = TRUE)
install.packages("knitr", dependencies = TRUE)
library(knitr)
