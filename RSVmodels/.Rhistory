par(mar = c(5,4,4,5))
times1 <- times[selind]
### plot comparing viruses
plot(times1,cases1,type = 'l',ylab = '# cases',xlab = 'Days',col = 'blue',lwd = 2,ylim = c(0,max(cases1)))
# lines(times1,cases1/a1*a2,col = 'red',lwd = 2)
lines(times1,cases2,col = 'red',lwd = 2)
beta2 <- 1.7*gamma/(Ntot)
### Initial conditions
yv110 <- yv11 <- 2/3/5;
yv210 <- yv21 <- 2/3/5;
yv220 <- yv22 <- 2/3/5;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xv10 <- Nv10 - yv110
xv20 <- Nv20 - yv210 - yv210
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxv1 <- - beta1*xv1*(yv11 + yv21 + ynv1)
dxv2 <- - beta1*xv2*(yv11 + yv21 + ynv1) - beta2*xv2*(yv22 + ynv2)
dxnv <- - beta1*xnv*(yv11 + yv21 + ynv1) - beta2*xnv*(yv22 + ynv2)
dyv11 <- beta1*xv1*(yv11 + yv21 + ynv1) - yv11*gamma
dyv21 <- beta1*xv2*(yv11 + yv21 + ynv1) - yv21*gamma
dyv22 <- beta2*xv2*(yv22 + ynv2) - yv22*gamma
dynv1 <- beta1*xnv*(yv11 + yv21 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yv22 + ynv2) - ynv2*gamma
dyv11new <- beta1*xv1*(yv11 + yv21 + ynv1)
dyv21new <- beta1*xv2*(yv11 + yv21 + ynv1)
dyv22new <- beta2*xv2*(yv22 + ynv2)
dynv1new <- beta1*xnv*(yv11 + yv21 + ynv1)
dynv2new <- beta2*xnv*(yv22 + ynv2)
dz <- (ynv1 + ynv2 + yv11 + yv21 + yv22)*gamma
# return the rate of change
list(c(dxv1,dxv2,dxnv,dynv1,dynv2,dyv11,dyv21,dyv22,
dynv1new,dynv2new,dyv11new, dyv21new, dyv22new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xv1=xv10,xv2=xv20,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yv11=yv110,yv21=yv210,yv22=yv220,
ynv1new=0,ynv2new=0,yv11new=0,yv21new=0,yv22new=0,z=z0)
times <- seq(0, 300, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xv1 <- out$xv1
xv2 <- out$xv2
xnv <- out$xnv
yv11new <- out$yv11new
yv21new <- out$yv21new
yv22new <- out$yv22new
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
###################################################################################################
###################################################################################################
dxv1 <- -diff(xv1)
dxv2 <- -diff(xv2)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv11 <- diff(yv11new)
dyv21 <- diff(yv21new)
dyv22 <- diff(yv22new)
selind <- which((dxv1 + dxv2 + dxnv)>0)
cases1 <- dyv11 + dyv21 + dynv1; cases1 <- cases1[selind]
cases2 <- dynv2 + dyv22; cases2 <- cases2[selind]
newcases <- cases1 + cases2;
Nsusc <- Ntot - (yv11new + yv21new + ynv1new + ynv2new + yv22new)[selind]
casesv <- dyv11 + dyv21 + dyv22; casesv <- casesv[selind]
casesnv <- dynv1 + dynv2; casesnv <- casesnv[selind]
infprsv <- (dyv11 + dyv21 + dynv1)*beta1 + (1-alpha)*(dyv22 + dynv2)*beta2
infprsnv <- (dyv11 + dyv21 + dynv1)*beta1 + (dyv22 + dynv2)*beta2
rls <- casesv/casesnv
## odds of vacc among cases
VEls <- 1-( rls/(vacc/(1-vacc)))
trueVEls <- 1-infprsv/infprsnv
a2 <- ceiling(max(cases2))
b2 <- nchar(a2) ## how many digits in number?
a1 <- ceiling(max(cases1))
b1 <- nchar(a1) ## how many digits in number?
y2uplim0 <- ceiling(a2/10^(b2-1))
y2uplim <- y2uplim0/10
y2tck2 <- seq(0,y2uplim,y2uplim/5)*10^b2/a2*a1
y2tck2lab <- sapply(round(seq(0,y2uplim,y2uplim/5)*10^b2), function(x) toString(x))
y2toax <- y2uplim0*10^(b2-1)
y1tck2 <- seq(0,y1uplim,.2)*10^b1/a1*a2
y1tck2lab <- sapply(round(seq(0,y1uplim,.2)*10^b1), function(x) toString(x))
y1toax <- y1uplim0*10^(b1-1)
y1uplim0 <- ceiling(a1/(10^(b1-1)))
y1uplim <- ifelse(y1uplim0%%2==0,y1uplim0,y1uplim0+1)/10
y1toax <- y1uplim0*10^(b1-1)
par(mar = c(5,4,4,5))
times1 <- times[selind]
### plot comparing viruses
plot(times1,cases1,type = 'l',ylab = '# cases',xlab = 'Days',col = 'blue',lwd = 2,ylim = c(0,max(cases1)))
# lines(times1,cases1/a1*a2,col = 'red',lwd = 2)
lines(times1,cases2,col = 'red',lwd = 2)
a3 <- ceiling(max(Nsusc))
b3 <- nchar(format(a3,scientific = F)) ## how many digits in number?
y3uplim0 <- ceiling(a3/10^(b3-1))
y3uplim <- ifelse(y3suplim0%%2==0,y3uplim0,y3uplim0+1)/10
VEmax <- max(VEls,trueVEls)
if(y3uplim0 < 4){
y3tck2 <- seq(0,y3uplim,0.1)*10^b3/a3*VEmax
y3tck2lab <- sapply(round(seq(0,y3uplim,0.1)*10^b3), function(x) toString(x))
} else {
y3tck2 <- seq(0,y3uplim,0.2)*10^b3/a3*VEmax
y3tck2lab <- sapply(round(seq(0,y3uplim,0.1)*10^b3), function(x) toString(x))
}
y3toax <- y3uplim0*10^(b3-1)
par(mar = c(5,4,4,5))
plot(times1,VEls,type = 'l',ylim = c(min(VEls,0),VEmax),ylab = 'VE',xlab = 'Day',
main = '',lwd = 2)
lines(times1,trueVEls, col = 'red')
lines(times1,Nsusc/a3*VEmax, col = 'blue',lwd = 2)
axis(side = 4,at= y3tck2,labels = y3tck2lab)
mtext('Susceptibles', 4, line = 3)
legend('bottomleft',c('VE','True VE','Pop. susc.'),col = c('black','red','blue'),
lty = 1,bty = 'n',lwd = 2,seg.len = .2,x.intersp = 0.1,y.intersp = 0.5)
beta1 <- 1.25*gamma/(Ntot)
beta2 <- 1.65*gamma/(Ntot)
### Initial conditions
yv110 <- yv11 <- 2/3/5;
yv210 <- yv21 <- 2/3/5;
yv220 <- yv22 <- 2/3/5;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xv10 <- Nv10 - yv110
xv20 <- Nv20 - yv210 - yv210
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxv1 <- - beta1*xv1*(yv11 + yv21 + ynv1)
dxv2 <- - beta1*xv2*(yv11 + yv21 + ynv1) - beta2*xv2*(yv22 + ynv2)
dxnv <- - beta1*xnv*(yv11 + yv21 + ynv1) - beta2*xnv*(yv22 + ynv2)
dyv11 <- beta1*xv1*(yv11 + yv21 + ynv1) - yv11*gamma
dyv21 <- beta1*xv2*(yv11 + yv21 + ynv1) - yv21*gamma
dyv22 <- beta2*xv2*(yv22 + ynv2) - yv22*gamma
dynv1 <- beta1*xnv*(yv11 + yv21 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yv22 + ynv2) - ynv2*gamma
dyv11new <- beta1*xv1*(yv11 + yv21 + ynv1)
dyv21new <- beta1*xv2*(yv11 + yv21 + ynv1)
dyv22new <- beta2*xv2*(yv22 + ynv2)
dynv1new <- beta1*xnv*(yv11 + yv21 + ynv1)
dynv2new <- beta2*xnv*(yv22 + ynv2)
dz <- (ynv1 + ynv2 + yv11 + yv21 + yv22)*gamma
# return the rate of change
list(c(dxv1,dxv2,dxnv,dynv1,dynv2,dyv11,dyv21,dyv22,
dynv1new,dynv2new,dyv11new, dyv21new, dyv22new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xv1=xv10,xv2=xv20,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yv11=yv110,yv21=yv210,yv22=yv220,
ynv1new=0,ynv2new=0,yv11new=0,yv21new=0,yv22new=0,z=z0)
times <- seq(0, 300, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xv1 <- out$xv1
xv2 <- out$xv2
xnv <- out$xnv
yv11new <- out$yv11new
yv21new <- out$yv21new
yv22new <- out$yv22new
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
###################################################################################################
###################################################################################################
dxv1 <- -diff(xv1)
dxv2 <- -diff(xv2)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv11 <- diff(yv11new)
dyv21 <- diff(yv21new)
dyv22 <- diff(yv22new)
selind <- which((dxv1 + dxv2 + dxnv)>0)
cases1 <- dyv11 + dyv21 + dynv1; cases1 <- cases1[selind]
cases2 <- dynv2 + dyv22; cases2 <- cases2[selind]
newcases <- cases1 + cases2;
Nsusc <- Ntot - (yv11new + yv21new + ynv1new + ynv2new + yv22new)[selind]
casesv <- dyv11 + dyv21 + dyv22; casesv <- casesv[selind]
casesnv <- dynv1 + dynv2; casesnv <- casesnv[selind]
infprsv <- (dyv11 + dyv21 + dynv1)*beta1 + (1-alpha)*(dyv22 + dynv2)*beta2
infprsnv <- (dyv11 + dyv21 + dynv1)*beta1 + (dyv22 + dynv2)*beta2
rls <- casesv/casesnv
## odds of vacc among cases
VEls <- 1-( rls/(vacc/(1-vacc)))
trueVEls <- 1-infprsv/infprsnv
a2 <- ceiling(max(cases2))
b2 <- nchar(a2) ## how many digits in number?
a1 <- ceiling(max(cases1))
b1 <- nchar(a1) ## how many digits in number?
y2uplim0 <- ceiling(a2/10^(b2-1))
y2uplim <- y2uplim0/10
y2tck2 <- seq(0,y2uplim,y2uplim/5)*10^b2/a2*a1
y2tck2lab <- sapply(round(seq(0,y2uplim,y2uplim/5)*10^b2), function(x) toString(x))
y2toax <- y2uplim0*10^(b2-1)
y1tck2 <- seq(0,y1uplim,.2)*10^b1/a1*a2
y1tck2lab <- sapply(round(seq(0,y1uplim,.2)*10^b1), function(x) toString(x))
y1toax <- y1uplim0*10^(b1-1)
y1uplim0 <- ceiling(a1/(10^(b1-1)))
y1uplim <- ifelse(y1uplim0%%2==0,y1uplim0,y1uplim0+1)/10
y1toax <- y1uplim0*10^(b1-1)
par(mar = c(5,4,4,5))
times1 <- times[selind]
### plot comparing viruses
plot(times1,cases1,type = 'l',ylab = '# cases',xlab = 'Days',col = 'blue',lwd = 2,ylim = c(0,max(cases1)))
# lines(times1,cases1/a1*a2,col = 'red',lwd = 2)
lines(times1,cases2,col = 'red',lwd = 2)
beta2 <- 1.7*gamma/(Ntot)
### Initial conditions
yv110 <- yv11 <- 2/3/5;
yv210 <- yv21 <- 2/3/5;
yv220 <- yv22 <- 2/3/5;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xv10 <- Nv10 - yv110
xv20 <- Nv20 - yv210 - yv210
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxv1 <- - beta1*xv1*(yv11 + yv21 + ynv1)
dxv2 <- - beta1*xv2*(yv11 + yv21 + ynv1) - beta2*xv2*(yv22 + ynv2)
dxnv <- - beta1*xnv*(yv11 + yv21 + ynv1) - beta2*xnv*(yv22 + ynv2)
dyv11 <- beta1*xv1*(yv11 + yv21 + ynv1) - yv11*gamma
dyv21 <- beta1*xv2*(yv11 + yv21 + ynv1) - yv21*gamma
dyv22 <- beta2*xv2*(yv22 + ynv2) - yv22*gamma
dynv1 <- beta1*xnv*(yv11 + yv21 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yv22 + ynv2) - ynv2*gamma
dyv11new <- beta1*xv1*(yv11 + yv21 + ynv1)
dyv21new <- beta1*xv2*(yv11 + yv21 + ynv1)
dyv22new <- beta2*xv2*(yv22 + ynv2)
dynv1new <- beta1*xnv*(yv11 + yv21 + ynv1)
dynv2new <- beta2*xnv*(yv22 + ynv2)
dz <- (ynv1 + ynv2 + yv11 + yv21 + yv22)*gamma
# return the rate of change
list(c(dxv1,dxv2,dxnv,dynv1,dynv2,dyv11,dyv21,dyv22,
dynv1new,dynv2new,dyv11new, dyv21new, dyv22new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xv1=xv10,xv2=xv20,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yv11=yv110,yv21=yv210,yv22=yv220,
ynv1new=0,ynv2new=0,yv11new=0,yv21new=0,yv22new=0,z=z0)
times <- seq(0, 300, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xv1 <- out$xv1
xv2 <- out$xv2
xnv <- out$xnv
yv11new <- out$yv11new
yv21new <- out$yv21new
yv22new <- out$yv22new
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
###################################################################################################
###################################################################################################
dxv1 <- -diff(xv1)
dxv2 <- -diff(xv2)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv11 <- diff(yv11new)
dyv21 <- diff(yv21new)
dyv22 <- diff(yv22new)
selind <- which((dxv1 + dxv2 + dxnv)>0)
cases1 <- dyv11 + dyv21 + dynv1; cases1 <- cases1[selind]
cases2 <- dynv2 + dyv22; cases2 <- cases2[selind]
newcases <- cases1 + cases2;
Nsusc <- Ntot - (yv11new + yv21new + ynv1new + ynv2new + yv22new)[selind]
casesv <- dyv11 + dyv21 + dyv22; casesv <- casesv[selind]
casesnv <- dynv1 + dynv2; casesnv <- casesnv[selind]
infprsv <- (dyv11 + dyv21 + dynv1)*beta1 + (1-alpha)*(dyv22 + dynv2)*beta2
infprsnv <- (dyv11 + dyv21 + dynv1)*beta1 + (dyv22 + dynv2)*beta2
rls <- casesv/casesnv
## odds of vacc among cases
VEls <- 1-( rls/(vacc/(1-vacc)))
trueVEls <- 1-infprsv/infprsnv
a2 <- ceiling(max(cases2))
b2 <- nchar(a2) ## how many digits in number?
a1 <- ceiling(max(cases1))
b1 <- nchar(a1) ## how many digits in number?
y2uplim0 <- ceiling(a2/10^(b2-1))
y2uplim <- y2uplim0/10
y2tck2 <- seq(0,y2uplim,y2uplim/5)*10^b2/a2*a1
y2tck2lab <- sapply(round(seq(0,y2uplim,y2uplim/5)*10^b2), function(x) toString(x))
y2toax <- y2uplim0*10^(b2-1)
y1tck2 <- seq(0,y1uplim,.2)*10^b1/a1*a2
y1tck2lab <- sapply(round(seq(0,y1uplim,.2)*10^b1), function(x) toString(x))
y1toax <- y1uplim0*10^(b1-1)
y1uplim0 <- ceiling(a1/(10^(b1-1)))
y1uplim <- ifelse(y1uplim0%%2==0,y1uplim0,y1uplim0+1)/10
y1toax <- y1uplim0*10^(b1-1)
par(mar = c(5,4,4,5))
times1 <- times[selind]
### plot comparing viruses
plot(times1,cases1,type = 'l',ylab = '# cases',xlab = 'Days',col = 'blue',lwd = 2,ylim = c(0,max(cases1)))
# lines(times1,cases1/a1*a2,col = 'red',lwd = 2)
lines(times1,cases2,col = 'red',lwd = 2)
beta2 <- 1.75*gamma/(Ntot)
### Initial conditions
yv110 <- yv11 <- 2/3/5;
yv210 <- yv21 <- 2/3/5;
yv220 <- yv22 <- 2/3/5;
ynv10 <- ynv1 <- 1;
ynv20 <- ynv2 <- 1;
xv10 <- Nv10 - yv110
xv20 <- Nv20 - yv210 - yv210
xnv0 <- Nnv0 - ynv10 - ynv20
z0 <- 0
parameters <- c(gamma=gamma,beta1=beta1, beta2=beta2)
### Define model
KKmod <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dxv1 <- - beta1*xv1*(yv11 + yv21 + ynv1)
dxv2 <- - beta1*xv2*(yv11 + yv21 + ynv1) - beta2*xv2*(yv22 + ynv2)
dxnv <- - beta1*xnv*(yv11 + yv21 + ynv1) - beta2*xnv*(yv22 + ynv2)
dyv11 <- beta1*xv1*(yv11 + yv21 + ynv1) - yv11*gamma
dyv21 <- beta1*xv2*(yv11 + yv21 + ynv1) - yv21*gamma
dyv22 <- beta2*xv2*(yv22 + ynv2) - yv22*gamma
dynv1 <- beta1*xnv*(yv11 + yv21 + ynv1) - ynv1*gamma
dynv2 <- beta2*xnv*(yv22 + ynv2) - ynv2*gamma
dyv11new <- beta1*xv1*(yv11 + yv21 + ynv1)
dyv21new <- beta1*xv2*(yv11 + yv21 + ynv1)
dyv22new <- beta2*xv2*(yv22 + ynv2)
dynv1new <- beta1*xnv*(yv11 + yv21 + ynv1)
dynv2new <- beta2*xnv*(yv22 + ynv2)
dz <- (ynv1 + ynv2 + yv11 + yv21 + yv22)*gamma
# return the rate of change
list(c(dxv1,dxv2,dxnv,dynv1,dynv2,dyv11,dyv21,dyv22,
dynv1new,dynv2new,dyv11new, dyv21new, dyv22new, dz))
})
}
### define vector with initial conditions for ode function
state <- c(xv1=xv10,xv2=xv20,xnv=xnv0,ynv1=ynv10,ynv2=ynv20,yv11=yv110,yv21=yv210,yv22=yv220,
ynv1new=0,ynv2new=0,yv11new=0,yv21new=0,yv22new=0,z=z0)
times <- seq(0, 300, by = 0.01)
out <- data.frame(ode(y = state, times = times, func = KKmod, parms = parameters))
xv1 <- out$xv1
xv2 <- out$xv2
xnv <- out$xnv
yv11new <- out$yv11new
yv21new <- out$yv21new
yv22new <- out$yv22new
ynv1new <- out$ynv1new
ynv2new <- out$ynv2new
###################################################################################################
###################################################################################################
dxv1 <- -diff(xv1)
dxv2 <- -diff(xv2)
dxnv <- -diff(xnv)
dynv1 <- diff(ynv1new)
dynv2 <- diff(ynv2new)
dyv11 <- diff(yv11new)
dyv21 <- diff(yv21new)
dyv22 <- diff(yv22new)
selind <- which((dxv1 + dxv2 + dxnv)>0)
cases1 <- dyv11 + dyv21 + dynv1; cases1 <- cases1[selind]
cases2 <- dynv2 + dyv22; cases2 <- cases2[selind]
newcases <- cases1 + cases2;
Nsusc <- Ntot - (yv11new + yv21new + ynv1new + ynv2new + yv22new)[selind]
casesv <- dyv11 + dyv21 + dyv22; casesv <- casesv[selind]
casesnv <- dynv1 + dynv2; casesnv <- casesnv[selind]
infprsv <- (dyv11 + dyv21 + dynv1)*beta1 + (1-alpha)*(dyv22 + dynv2)*beta2
infprsnv <- (dyv11 + dyv21 + dynv1)*beta1 + (dyv22 + dynv2)*beta2
rls <- casesv/casesnv
## odds of vacc among cases
VEls <- 1-( rls/(vacc/(1-vacc)))
trueVEls <- 1-infprsv/infprsnv
a2 <- ceiling(max(cases2))
b2 <- nchar(a2) ## how many digits in number?
a1 <- ceiling(max(cases1))
b1 <- nchar(a1) ## how many digits in number?
y2uplim0 <- ceiling(a2/10^(b2-1))
y2uplim <- y2uplim0/10
y2tck2 <- seq(0,y2uplim,y2uplim/5)*10^b2/a2*a1
y2tck2lab <- sapply(round(seq(0,y2uplim,y2uplim/5)*10^b2), function(x) toString(x))
y2toax <- y2uplim0*10^(b2-1)
y1tck2 <- seq(0,y1uplim,.2)*10^b1/a1*a2
y1tck2lab <- sapply(round(seq(0,y1uplim,.2)*10^b1), function(x) toString(x))
y1toax <- y1uplim0*10^(b1-1)
y1uplim0 <- ceiling(a1/(10^(b1-1)))
y1uplim <- ifelse(y1uplim0%%2==0,y1uplim0,y1uplim0+1)/10
y1toax <- y1uplim0*10^(b1-1)
par(mar = c(5,4,4,5))
times1 <- times[selind]
### plot comparing viruses
plot(times1,cases1,type = 'l',ylab = '# cases',xlab = 'Days',col = 'blue',lwd = 2,ylim = c(0,max(cases1)))
# lines(times1,cases1/a1*a2,col = 'red',lwd = 2)
lines(times1,cases2,col = 'red',lwd = 2)
# axis(side = 4,at= y1tck2,labels = y1tck2lab)
# mtext('# cases, virus 2', 4, line = 3)
legend('topleft',c('Virus 1','Virus 2'),col = c('blue','red'),
lty = 1,bty = 'n',lwd = 2,seg.len = .2,x.intersp = 0.1,y.intersp = 0.5)
a3 <- ceiling(max(Nsusc))
b3 <- nchar(format(a3,scientific = F)) ## how many digits in number?
y3uplim0 <- ceiling(a3/10^(b3-1))
y3uplim <- ifelse(y3suplim0%%2==0,y3uplim0,y3uplim0+1)/10
VEmax <- max(VEls,trueVEls)
if(y3uplim0 < 4){
y3tck2 <- seq(0,y3uplim,0.1)*10^b3/a3*VEmax
y3tck2lab <- sapply(round(seq(0,y3uplim,0.1)*10^b3), function(x) toString(x))
} else {
y3tck2 <- seq(0,y3uplim,0.2)*10^b3/a3*VEmax
y3tck2lab <- sapply(round(seq(0,y3uplim,0.1)*10^b3), function(x) toString(x))
}
y3toax <- y3uplim0*10^(b3-1)
par(mar = c(5,4,4,5))
plot(times1,VEls,type = 'l',ylim = c(min(VEls,0),VEmax),ylab = 'VE',xlab = 'Day',
main = '',lwd = 2)
lines(times1,trueVEls, col = 'red')
lines(times1,Nsusc/a3*VEmax, col = 'blue',lwd = 2)
axis(side = 4,at= y3tck2,labels = y3tck2lab)
mtext('Susceptibles', 4, line = 3)
legend('bottomleft',c('VE','True VE','Pop. susc.'),col = c('black','red','blue'),
lty = 1,bty = 'n',lwd = 2,seg.len = .2,x.intersp = 0.1,y.intersp = 0.5)
# dev.off()
library(splines)
library(R2jags)
###############################################################################
###############################################################################
###  Ivo M. Foppa, Aug 2018---National RSV excess mort. analysis          #####
###############################################################################
###############################################################################
bfolder0 <- "C:/Users/vor1/Dropbox/Misc work/RSV/RSV git project/"
setwd(paste0(bfolder0,'RSVData'))
###############################################################################
fromyr <- 2010
toyr <- 2016
fromwk <- 40
toseaswk <- 17
towk <- 52
nseas <- toyr - fromyr
### Define 'global N'
mmwrdat<-read.table("mmwrweeks.txt",header=T)
mmwrdat<-mmwrdat[which((mmwrdat$wyear==fromyr&mmwrdat$week>=fromwk)|(mmwrdat$wyear>fromyr&mmwrdat$wyear<toyr)|(mmwrdat$wyear==toyr&mmwrdat$week<=towk)),]
DVDun <- mmwrdat$dvdweek
N <- length(mmwrdat$dvdweek)
seasbeg <- which(mmwrdat$week==fromwk)
seasend <- which(mmwrdat$week==toseaswk)
time <- (1:N)/N
#######################################################################################
for (k in 1:6){
assign(paste("seas",k,sep=""),c(max(seasbeg[k],3),min(seasend[k],N)))
}
#######################################################################
niter <- 5000
nadapt <- 1000
###################################################################################################
###################################################################################################
###################################################################################################
filename <- paste0('data_National_2010_16_5ag.dat')
setwd(paste0(bfolder0,'RSVData'))
datarr <- data.frame(read.table(file = filename,header = T))
###################################################################################################
###################################################################################################
###  NS, flu mort indicator #######################################################################
###################################################################################################
qual6 <- ' NB flumort 6 seas'
model6.file <- paste0('model NS',qual6,'.txt')
ag <- 5
agdata <- datarr[which(datarr$age==ag),]
RSV <- agdata$RSV
flumort <- agdata$flu
mort <- agdata$rcu
N <- length(mort)
pop <- agdata$pop
N <- length(mort)
time <- (1:N)/N
###################################################################################################
variables7 <- c('EMRSV1tot','EMRSV2tot','EMRSV3tot','EMRSV4tot','EMRSV5tot','EMRSV6tot','EMRSVtot')
nknots <- 4
#######################################################################################
###################################################################################################
ndf <- round((nknots + 1) * nseas/(nseas*52.5)*N)
nsarr <- ns(time,df = ndf)[,]  ## defining basis matrix
#######################################################################################
mod <- lm(mort ~ ns(time, df = ndf))
smod <- summary(mod)
coeffls <- as.numeric(smod$coefficients[,1])/mean(pop)
nsinit <- coeffls[2:(ndf + 1)]
b0init <- coeffls[1]
#######################################################################################
data <- list('N'=N,'ndf'=ndf,'ns'=nsarr,'y'=mort,'RSV'=RSV,'pop'=pop, 'flumort'=flumort,
'seas1'=seas1,'seas2'=seas2,'seas3'=seas3,'seas4'=seas4,'seas5'=seas5,'seas6'=seas6)
#######################################################################################
rinit <- (mort/(b0init*pop))[3:N]
sigmainit <- sapply(1:N,function(x) ifelse(flumort[x] > 0, flumort[x]/pop[x],.1/pop[x]))
inits <- function() {
list(
b0=b0init,
b10=0,
b11=0,
b12=0,
b20=0,
b21=0,
b22=0,
sigma=sigmainit,
b=nsinit,
logalpha=0.0,
r=rinit
)}
setwd(paste0(bfolder0,'RSVmodels'))
seas1
seas2
